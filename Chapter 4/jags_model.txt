data {

D <- dim(seen) #element 1 is number of individuals, 2 number of surveys

# Manually inputed number of age classes
ageClasses<-3

# Zero indexes show where in the leslie matrix the values are Zero
# first column determines which row, second column determines which column. 
# This is important because JAGS cannot autofill such values on a leslie matrix
nZeros <- dim(ZeroIndexes)
#nZeros is the number of elements in the leslie matrix that would be filled with a zero
y~dnorm(0,0.01)

# Number of years to project population growth + number of years where population is monitored
projecting_frame<-n_years+n_years_proj

}

model{
    
#########	
##Priors#
#########


	# Carrying capacity
		K~dnorm(500,0.1)
		
	# MastProbability
	   
	   MastProb~dbeta(500,500)

	# Fecundity
		# Convert SD to Precision
		interceptTau<-pow(FledgNumberIntercept[2],-2)
		betaSoftTau<-pow(FledgNumberSoftFeedEffect[2],-2)
		betaHardTau<-pow(FledgNumberHardFeedEffect[2],-2)
	
		# Define prior distributions
		reprodIntercept~dnorm(FledgNumberIntercept[1],interceptTau)
		reprodBetaSoftFeed~dnorm(FledgNumberSoftFeedEffect[1],betaSoftTau) #T(0,)
		reprodBetaHardFeed~dnorm(FledgNumberHardFeedEffect[1],betaHardTau) #T(0,)
  
	#Survival
		# Convert SD to Precision
		phi.interceptTau<-pow(survivalIntercept[2],-2)
		phi.betaSoftTau<-pow(survivalSoftFeedEffect[2],-2) #T(0,)
		phi.betaHardTau<-pow(survivalHardFeedEffect[2],-2) #T(0,)
		phi.ageTau<-pow(survivalAgeEffect[2],-2)
		phi.mastTau<-pow(survivalMastEffect[2],-2)
		phi.poisonTau<-pow(survivalPoisonDropEffect[2],-2)
		
		# Define prior distributions
		survIntercept ~dnorm(survivalIntercept[1],phi.interceptTau)
		survBetaSoftFeed~dnorm(survivalSoftFeedEffect[1],phi.betaSoftTau)
		survBetaHardFeed~dnorm(survivalHardFeedEffect[1],phi.betaHardTau)
		survAgeEffect~dnorm(survivalAgeEffect[1],phi.ageTau)
		#### No actual prior defined yet, just copying survival Age
		survMastEffect~dnorm(survivalMastEffect[1],phi.mastTau)
		survPoisonDropEffect~dnorm(survivalPoisonDropEffect[1],phi.poisonTau)
		survCostRelease~dbeta(survivalCostOfRelease[1],survivalCostOfRelease[2])
	
  #Probability of detection (at this point just a formality, it is set to functionally 1)
  # it is assumed all individuals are detected with a radio-tracking monitoring
    DetectProb~dbeta(999,1)

  # Random Effects
  
  s.t.fec ~ dunif(0, 1)  				 # among-year SD in survival
  s.t.phi ~ dunif(0, 1)  				 # among-year SD in survival
  tau.t.fec <- pow(s.t.fec, -2)			 # next 2 lines convert to precision
  tau.t.phi <- pow(s.t.phi, -2)			 # next 2 lines convert to precision
  ## assign random year effects 
  for(j in 1:n_years){
		re.t.fec[j] ~ dnorm(0, tau.t.fec) # random year effect on detection probability
		re.t.phi[j] ~ dnorm(0, tau.t.phi) # random year effect on detection probability
  }

  ######################################
  #Derived Parameters based on priors ##
  ######################################
  
  # Calculate predicted values for all possible management scenarios
  # Defined manually (maybe can be partially automated through loops)
   for(m in 1:n_alternatives){
   
	  # Expected Survival under each management and each age class
	  logit(ExpectedSurvival[1,m])<-survIntercept+
					survBetaSoftFeed*SoftFeed[m]+
					survBetaHardFeed*HardFeed[m]+
					0									
		
	  logit(ExpectedSurvival[2,m])<-logit(ExpectedSurvival[1,m]) + 
										 survAgeEffect 
	  logit(ExpectedSurvival[3,m])<-logit(ExpectedSurvival[1,m]) +
										 survAgeEffect 
  
  
	  # Expected fecundity under each age class
	  # (first age class does not reproduce)
	  ExpectedFecundity[1,m]<-0
	  
	  log(ExpectedFecundity[2,m])<-reprodIntercept+
				    reprodBetaSoftFeed*SoftFeed[m] +
					reprodBetaHardFeed*HardFeed[m]+
					0
					
	  ExpectedFecundity[3,m]<-ExpectedFecundity[2,m]
  }
  
  # Temporal covariates (independent of management)
   for(j in 1:projecting_frame){
   
	# Whether a given year is a Mast Year
	isMastYear[j]~dbern(MastProb)
	
   }
  
  # Proportion of years that are Mast Years
  PropMastYears<-sum(isMastYear[1:n_years])/n_years
  
  # Generate population growth predictions
  # for each management	 
  
   for(m in 1:n_alternatives){
   
   # Initial population size inputed from data,
   # the same for all management options
   N[1,1:ageClasses,m]<-N0
   
   
   for (j in 2:projecting_frame){
   
   
   #########################################
   # Dinamically generating Leslie Matrix ##
   #########################################
   	   # Mind that this is a hyperdimensional Leslie Matrix:
	   # the 3rd dimension is the management action, and the 
	   # 4th dimension is a yearly replicate
	   for (a in 1:ageClasses){    
	   
	   # Filling first row with expected fecundity
	   L[1,a,m,j]<-ExpectedFecundity[a,m]
	   
	   # Filling expected survivals
	   # (as a function of yearly covariates, in this case Mast years)
	   logit(L[min(a+1,ageClasses),a,m,j])<-logit(ExpectedSurvival[a,m])+
		(survMastEffect*isMastYear[j])+
		(survPoisonDropEffect*isMastYear[j]*PoisonDrop[m])+
		0
	   
	   # Creating matrix of Cost of Release Values
	   # No Cost on Fecundity
	   CoR[1,a,m,j]<-1 
	   # Cost of Release Extract from Prior
	   CoR[min(a+1,ageClasses),a,m,j]<-survCostRelease 
	   
	   # Generating vector of released animals
	   Nreleased[j,a,m]<-ReleasedAnimals[m]*
	   # This line cancels out the released animals if the current year is over the release schedule
	   ifelse(ReleaseSchedule[m]>j,0,1)* 
	   # This line makes sure the released animals are only of age class 2
	   ifelse(a==2,1,0)

   }
   # Fill the Leslie Matrix with the proper zeroes
   # This because JAGS does not have the capacity to auto fill missing values in an array
   for(z in 1:nZeros[1]){
		# Zero Indexes are the "coordinates" of the cells that take up 0 values on a leslie Matrix
		L[ZeroIndexes[z,1],ZeroIndexes[z,2],m,j]<-0
		CoR[ZeroIndexes[z,1],ZeroIndexes[z,2],m,j]<-0
	}
   
  
  # Prediction using Leslie matrix for each age class
	N[j,1:ageClasses,m]<-(N[j-1,,m]%*%
		L[,,m,j])+
		# Number of Individuals Released (Accounted for Cost of Release)
		(Nreleased[j,,m]%*%
		(L[,,m,j]*CoR[,,m,j]))
	
	# Boolean variable whether population is at carrying capacity
	IsAtCarryingCapacity[j,m]<-ifelse(sum(N[j,,m])>=K,1,0)
	
	# Total population size for each management action, on each time step
	TotalN[j,m]<-sum(N[j,,m])
	
	}
	
	# Average yearly lambda through the prediction time frame.
	Lambda[m]<-pow(sum(N[projecting_frame,1:ageClasses,m])/sum(N[1,1:ageClasses,m]),1/projecting_frame)
	# Whether population has declined over time
	Decline[m]<-ifelse(Lambda[m]<1,1,0)
	# Final Population Size
	finalN[m]<-sum(N[projecting_frame,,m])
	# Whether population is quasi-extinct
	QuasiExtinction[m] <- ifelse(finalN[m]<=10,1,0)
	
	
  }
